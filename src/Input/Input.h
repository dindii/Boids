#pragma once
#include <GLFW/glfw3.h>
#include "Math/vec2.h"

namespace GLR
{
	enum EKeyCode : uint8_t
	{
	GLR_KEY_UNKNOWN = GLFW_KEY_UNKNOWN,

	
	GLR_KEY_SPACE = GLFW_KEY_SPACE,
	
	GLR_KEY_APOSTROPHE = GLFW_KEY_APOSTROPHE  /* ' */,
	
	GLR_KEY_COMMA = GLFW_KEY_COMMA  /* , */,
	
	GLR_KEY_MINUS = GLFW_KEY_MINUS   /* - */,
	
	GLR_KEY_PERIOD = GLFW_KEY_PERIOD   /* . */,
	
	GLR_KEY_SLASH = GLFW_KEY_SLASH   /* / */,
	
	GLR_KEY_0 = GLFW_KEY_0,
	
	GLR_KEY_1 = GLFW_KEY_1,
	
	GLR_KEY_2 = GLFW_KEY_2,
	
	GLR_KEY_3 = GLFW_KEY_3,
	
	GLR_KEY_4 = GLFW_KEY_4,
	
	GLR_KEY_5 = GLFW_KEY_5,
	
	GLR_KEY_6 = GLFW_KEY_6,
	
	GLR_KEY_7 = GLFW_KEY_7,
	
	GLR_KEY_8 = GLFW_KEY_8,
	
	GLR_KEY_9 = GLFW_KEY_9,
	
	GLR_KEY_SEMICOLON = GLFW_KEY_SEMICOLON,
	
	GLR_KEY_EQUAL = GLFW_KEY_EQUAL,
	
	GLR_KEY_A = GLFW_KEY_A,
	
	GLR_KEY_B = GLFW_KEY_B,
	
	GLR_KEY_C = GLFW_KEY_C,
	

	GLR_KEY_D = GLFW_KEY_D,
	
	GLR_KEY_E = GLFW_KEY_E,
	
	GLR_KEY_F = GLFW_KEY_F,
	
	GLR_KEY_G = GLFW_KEY_G,
	
	GLR_KEY_H = GLFW_KEY_H,
	
	GLR_KEY_I = GLFW_KEY_I,
	
	GLR_KEY_J = GLFW_KEY_J,
	
	GLR_KEY_K = GLFW_KEY_K,
	
	GLR_KEY_L = GLFW_KEY_L,
	
	GLR_KEY_M = GLFW_KEY_M,
	
	GLR_KEY_N = GLFW_KEY_N,
	
	GLR_KEY_O = GLFW_KEY_O,
	
	GLR_KEY_P = GLFW_KEY_P,
	
	GLR_KEY_Q = GLFW_KEY_Q,
	
	GLR_KEY_R = GLFW_KEY_R,
	
	GLR_KEY_S = GLFW_KEY_S,
	
	GLR_KEY_T = GLFW_KEY_T,
	
	GLR_KEY_U = GLFW_KEY_U,
	
	GLR_KEY_V = GLFW_KEY_V,
	
	GLR_KEY_W = GLFW_KEY_W,
	
	GLR_KEY_X = GLFW_KEY_X,
	
	GLR_KEY_Y = GLFW_KEY_Y,
	
	GLR_KEY_Z = GLFW_KEY_Z,
	
	GLR_KEY_LEFT_BRACKET = GLFW_KEY_LEFT_BRACKET,
	
	GLR_KEY_BACKSLASH = GLFW_KEY_BACKSLASH,
	
	GLR_KEY_RIGHT_BRACKET = GLFW_KEY_RIGHT_BRACKET,
	
	GLR_KEY_GRAVE_ACCENT = GLFW_KEY_GRAVE_ACCENT,
	
	GLR_KEY_WORLD_1 = GLFW_KEY_WORLD_1,
	
	GLR_KEY_WORLD_2 = GLFW_KEY_WORLD_2,
	
	GLR_KEY_ESCAPE = GLFW_KEY_ESCAPE,
	
	GLR_KEY_ENTER = GLFW_KEY_ENTER,
	
	GLR_KEY_TAB = GLFW_KEY_TAB,
	
	GLR_KEY_BACKSPACE = GLFW_KEY_BACKSPACE,
	
	GLR_KEY_INSERT = GLFW_KEY_INSERT,
	
	GLR_KEY_DELETE = GLFW_KEY_DELETE,
	
	GLR_KEY_RIGHT = GLFW_KEY_RIGHT,
	
	GLR_KEY_LEFT = GLFW_KEY_LEFT,
	
	GLR_KEY_DOWN = GLFW_KEY_DOWN,
	
	GLR_KEY_UP = GLFW_KEY_UP,
	
	GLR_KEY_PAGE_UP = GLFW_KEY_PAGE_UP,
	
	GLR_KEY_PAGE_DOWN = GLFW_KEY_PAGE_DOWN,
	
	GLR_KEY_HOME = GLFW_KEY_HOME,
	
	GLR_KEY_END = GLFW_KEY_END,
	
	GLR_KEY_CAPS_LOCK = GLFW_KEY_CAPS_LOCK,
	
	GLR_KEY_SCROLL_LOCK = GLFW_KEY_SCROLL_LOCK,
	
	GLR_KEY_NUM_LOCK = GLFW_KEY_NUM_LOCK,
	
	GLR_KEY_PRINT_SCREEN = GLFW_KEY_PRINT_SCREEN,
	
	GLR_KEY_PAUSE = GLFW_KEY_PAUSE,
	
	GLR_KEY_F1 = GLFW_KEY_F1,
	
	GLR_KEY_F2 = GLFW_KEY_F2,
	
	
	GLR_KEY_F3 = GLFW_KEY_F3,
	
	GLR_KEY_F4 = GLFW_KEY_F4,
	
	GLR_KEY_F5 = GLFW_KEY_F5,
	
	GLR_KEY_F6 = GLFW_KEY_F6,
	
	GLR_KEY_F7 = GLFW_KEY_F7,
	
	GLR_KEY_F8 = GLFW_KEY_F8,
	
	GLR_KEY_F9 = GLFW_KEY_F9,
	
	GLR_KEY_F10 = GLFW_KEY_F10,
	
	GLR_KEY_F11 = GLFW_KEY_F11,
	
	GLR_KEY_F12 = GLFW_KEY_F12,
	
	GLR_KEY_F13 = GLFW_KEY_F13,
	
	GLR_KEY_F14 = GLFW_KEY_F14,
	
	GLR_KEY_F15 = GLFW_KEY_F15,
	
	GLR_KEY_F16 = GLFW_KEY_F16,
	
	GLR_KEY_F17 = GLFW_KEY_F17,
	
	GLR_KEY_F18 = GLFW_KEY_F18,
	
	GLR_KEY_F19 = GLFW_KEY_F19,
	
	GLR_KEY_F20 = GLFW_KEY_F20,
	
	GLR_KEY_F21 = GLFW_KEY_F21,
	
	GLR_KEY_F22 = GLFW_KEY_F22,
	
	GLR_KEY_F23 = GLFW_KEY_F23,
	
	GLR_KEY_F24 = GLFW_KEY_F24,
	
	GLR_KEY_F25 = GLFW_KEY_F25,
	
	GLR_KEY_KP_0 = GLFW_KEY_KP_0,
	
	GLR_KEY_KP_1 = GLFW_KEY_KP_1,
	
	GLR_KEY_KP_2 = GLFW_KEY_KP_2,
	
	GLR_KEY_KP_3 = GLFW_KEY_KP_3,
	
	GLR_KEY_KP_4 = GLFW_KEY_KP_4,
	
	GLR_KEY_KP_5 = GLFW_KEY_KP_5,
	
	GLR_KEY_KP_6 = GLFW_KEY_KP_6,
	
	GLR_KEY_KP_7 = GLFW_KEY_KP_7,
	
	GLR_KEY_KP_8 = GLFW_KEY_KP_8,
	
	GLR_KEY_KP_9 = GLFW_KEY_KP_9,
	
	GLR_KEY_KP_DECIMAL = GLFW_KEY_KP_DECIMAL,
	
	GLR_KEY_KP_DIVIDE = GLFW_KEY_KP_DIVIDE,
	
	GLR_KEY_KP_MULTIPLY = GLFW_KEY_KP_MULTIPLY,
	
	GLR_KEY_KP_SUBTRACT = GLFW_KEY_KP_SUBTRACT,
	
	GLR_KEY_KP_ADD = GLFW_KEY_KP_ADD,
	
	GLR_KEY_KP_ENTER = GLFW_KEY_KP_ENTER,
	
	GLR_KEY_KP_EQUAL = GLFW_KEY_KP_EQUAL,
	
	GLR_KEY_LEFT_SHIFT = GLFW_KEY_LEFT_SHIFT,
	
	GLR_KEY_LEFT_CONTROL = GLFW_KEY_LEFT_CONTROL,
	
	GLR_KEY_LEFT_ALT = GLFW_KEY_LEFT_ALT,
	
	GLR_KEY_LEFT_SUPER = GLFW_KEY_LEFT_SUPER,
	
	GLR_KEY_RIGHT_SHIFT = GLFW_KEY_RIGHT_SHIFT,
	
	GLR_KEY_RIGHT_CONTROL = GLFW_KEY_RIGHT_CONTROL,
	
	GLR_KEY_RIGHT_ALT = GLFW_KEY_RIGHT_ALT,
	
	GLR_KEY_RIGHT_SUPER = GLFW_KEY_RIGHT_SUPER,
	
	GLR_KEY_MENU = GLFW_KEY_MENU,
	
	GLR_KEY_LAST = GLR_KEY_MENU
	};

	enum MouseButtonsCode : uint8_t
	{
		GLR_MOUSE_BUTTON_1 = GLFW_MOUSE_BUTTON_1,
		GLR_MOUSE_BUTTON_2 = GLFW_MOUSE_BUTTON_2,
		GLR_MOUSE_BUTTON_3 = GLFW_MOUSE_BUTTON_3,
		GLR_MOUSE_BUTTON_4 = GLFW_MOUSE_BUTTON_4,
		GLR_MOUSE_BUTTON_5 = GLFW_MOUSE_BUTTON_5,
		GLR_MOUSE_BUTTON_6 = GLFW_MOUSE_BUTTON_6,
		GLR_MOUSE_BUTTON_7 = GLFW_MOUSE_BUTTON_7,
		GLR_MOUSE_BUTTON_8 = GLFW_MOUSE_BUTTON_8,
		GLR_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_LAST,
		GLR_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_LEFT,
		GLR_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_RIGHT,
		GLR_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_MIDDLE
	};
	
	class Input
	{
	public:
		static bool IsKeyPressed(EKeyCode kc);
		static bool IsMouseButtonPressed(MouseButtonsCode mb);
		static void HideAndLockCursor(bool cond);
		static vec2 GetMousePosition();
	};
	
}